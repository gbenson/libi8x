What has changed in libi8x?
===========================

Changes in libi8x 0.0.6
-----------------------

* libi8x no longer uses a patched version of libtool.  The required
  library directory layout is now created at "make install" time.

* AM_MAINTAINER_MODE([enable]) was added to configure.ac to allow
  disabling the rebuild rules via --disable-maintainer-mode.


Changes in libi8x 0.0.5
-----------------------

* libi8x now has Python bindings, and tests may now be written using
  Python or C.  Note that the Python bindings will have a separate
  release schedule from libi8x; they're shipped in the libi8x tarball
  purely to run the testsuite.

* The shared library libi8x.so is now versioned, and a number of
  symbols have been made internal in preparation for a 1.0 release.
  The soname has been changed from libi8x.so.0 to libi8x.so.1 to
  reflect this.

* The debug interpreter defaults to on if log level >= LOG_DEBUG when
  the execution context is created, so it's no longer necessary to set
  I8X_DEBUG to see trace messages.

* The I8X_DEBUG environment variable has been renamed as I8X_DBG_MEM
  to reflect the fact that it now has a single purpose (enabling the
  debug allocator).

* libi8x now supports local functions.  These are native functions
  registered with a zero-length provider; they may be accessed by
  reference but not by name.  Essentially they are anonymous functions
  with optional names.

* i8x_ctx_unregister_func has been replaced with i8x_func_unregister.

* i8x_ctx_strerror_r has been replaced with i8x_strerror_r,
  i8x_ctx_get_last_error_src_name and i8x_ctx_get_last_error_src_offset.

* The relocation interface has changed.

* Userdata is now immutable once set.

* i8x_xctx_call type-checks arguments and return values from native
  functions

* A number of bugs in the LEB128 decoders and function unregistration
  are now fixed.

* libi8x now has many more tests.

* A new error code I8X_NATCALL_FAILED has been introduced.


Changes in libi8x 0.0.4
-----------------------

* The libthread_db example now uses ps_foreach_infinity_note, if
  present, rather than walking r_debug.

* The libthread_db example now uses ps_get_register, if present,
  rather than using ps_lgetregs.

* The libthread_db example's td_thr_get_info now fills in all fields
  that glibc's libthread_db fills in.

* The libthread_db example's td_thr_tls_get_addr has been rewritten
  without using thread::get_tls_addr(ppi)ip.


Changes in libi8x 0.0.3
-----------------------

* The libthread_db example now has a self-test.

* procservice::get_register(ii)i should now work for debugger wordsize
  != inferior wordsize cases.

* The libthread_db example's r_debug walk should now work for debugger
  wordsize != inferior wordsize cases.

* Everything should now build on 32-bit.

* 64-bit dereferences in 32-bit notes are now rejected.

* All supported operations are now implemented in libi8x.

* i8x_code_unpack_info no longer leaks readbuf references on error.

* i8x_type is now public.

* More of i8x_funcref is now public.

* i8x_func is passed to native calls, for userdata access and
  polymorphism.

* The libthread_db example now implements td_thr_tlsbase and
  td_thr_get_addr.

* libi8x has more tests, including validation and execution smoke
  tests for all notes currently in existence.


..
  Local Variables:
  mode: rst
  End:
